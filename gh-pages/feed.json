{
  "version": "https://jsonfeed.org/version/1",
  "title": "Primary Unit mirror on GitHub",
  "home_page_url": "https://robjwells.github.io",
  "feed_url": "https://robjwells.github.io/feed.json",
  "description": "A mirror of https://www.robjwells.com hosted on GitHub",
  "author": {
    "name": "Rob Wells",
    "url": "https://www.robjwells.com/about",
    "avatar": "https://www.robjwells.com/images/rob-scafell-pike.jpg"
  },
  "icon": "https://www.robjwells.com/resources/favicon.png",
  "favicon": "https://www.robjwells.com/resources/favicon-64.png",
  "items": [
    {
      "id": "https://robjwells.github.io/2019/06/help-zip-is-eating-my-iterators-items/",
      "url": "https://robjwells.github.io/2019/06/help-zip-is-eating-my-iterators-items/",
      "title": "Help, zip is eating my iterator\u2019s items",
      "content_html": "<p>Python\u2019s <a href=\"https://docs.python.org/3.7/library/functions.html#zip\"><code>zip</code></a> function, which knits together two iterables, is indispensable for me. It works like this:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">list_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">list_two</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">list_one</span><span class=\"p\">,</span> <span class=\"n\">list_two</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">)</span>\n<span class=\"c1\"># (1, 'a')</span>\n<span class=\"c1\"># (2, 'b')</span>\n<span class=\"c1\"># (3, 'c')</span>\n</pre></div>\n<p>If the two iterables differ in length, zip halts after the shortest is exhausted. If we add an additional element to one of the lists above, we get the same results:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">list_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">list_two</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">]</span>  <span class=\"c1\"># Note extra item, \"d\"</span>\n<span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">list_one</span><span class=\"p\">,</span> <span class=\"n\">list_two</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">)</span>\n<span class=\"c1\"># (1, 'a')</span>\n<span class=\"c1\"># (2, 'b')</span>\n<span class=\"c1\"># (3, 'c')</span>\n</pre></div>\n<p>But the actual mechanics of this surprised me. Today I was working on the \u201cchunked\u201d problem from <a href=\"https://www.pythonmorsels.com\">Python Morsels</a> (which is great and you should totally try out if you write Python), and was left scratching my head after elements of my iterable started disappearing.</p>\n<p>The basic problem for chunked is this: given some iterable, return its elements in <code>count</code>-length lists. <a href=\"https://treyhunner.com\">Trey</a> likes you to think in terms of \u201cany iterable\u201d so you can\u2019t depend on list-like behaviour, such as being able to index into the iterable or check its length without consuming it.</p>\n<p>It\u2019s safer to assume you get one traversal. So, my solution starts like this, creating an <a href=\"https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/\">iterator from the iterable</a>.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">chunked</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">):</span>\n    <span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre></div>\n<p>Then (eliding the scaffolding) I build up a new <code>count</code>-length chunk using <code>zip</code> in a comprehension:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))]</span>\n</pre></div>\n<p>Here I use the \u201cearliest finish\u201d behaviour of <code>zip</code> paired with <code>range</code> \u2014 the amount of numbers in the range (<code>count</code>-many of them) determines how many items I fetch from the iterator.</p>\n<p>Let\u2019s give this a try, using your imagination to flesh out the rest of <code>chunked</code>:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">chunked</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n<span class=\"c1\"># [0, 1, 2, 3]</span>\n<span class=\"c1\"># [5, 6, 7, 8]</span>\n</pre></div>\n<p>Er, hm. Not what I was expecting, which was:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"c1\"># [0, 1, 2, 3]</span>\n<span class=\"c1\"># [4, 5, 6, 7]</span>\n<span class=\"c1\"># [8, 9]</span>\n</pre></div>\n<p>Somehow, the program is consuming an extra item from <code>iterator</code> each time I create a chunk. But that list comprehension is the only place where I touch <code>iterator</code>. What gives?</p>\n<p>Well, how does <code>zip</code> know when to terminate? If you take a look <a href=\"https://docs.python.org/3.7/library/functions.html#zip\">in the documentation</a>, you\u2019ll see a handy code sample that is \u201cequivalent to\u201d the implementation of <code>zip</code>. There we see that <code>zip</code> builds up a list of results by taking an item from each of the given iterables, but if any of those iterables are finished, it just returns \u2014 and discards the result list!</p>\n<p>So what happens with <code>zip(longer, shorter)</code> is that it takes from <code>longer</code>, stashes the item, discovers <code>shorter</code> is exhausted, and discards the item from <code>longer</code>. And that\u2019s what happens to the missing numbers in the example above.</p>\n<p>This situation arises because I\u2019m zipping the same iterable repeatedly, until it\u2019s empty, and because the iterator is the first argument to <code>zip</code>. This small change works fine:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"c1\"># Old, broken</span>\n<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))]</span>\n<span class=\"c1\"># New, fixed</span>\n<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">),</span> <span class=\"n\">iterator</span><span class=\"p\">)]</span>\n</pre></div>\n<p>In the new version, <code>zip</code> discovers that the iterator over the range is exhausted <em>first</em>, before it takes an item from <code>iterator</code>, so no items are ever discarded.</p>\n<p>So, is this OK? Really, really not! This is <em>super</em>-fragile. It\u2019s not obvious that switching the arguments will break the code. And really it just <em>looks</em> wrong, because surely the ignored tuple element (assigned to the underscore) should come after the item that we care about?</p>\n<p>Thankfully, the <a href=\"https://docs.python.org/3.7/library/itertools.html#module-itertools\"><code>itertools</code></a> module has what we need (as always!). The reason I originally used the list comprehension-zip-range combo is because you can\u2019t slice every iterable. For example:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"c1\"># ---------------------------------------------------------------------------</span>\n<span class=\"c1\"># TypeError                                 Traceback (most recent call last)</span>\n<span class=\"c1\"># &lt;ipython-input-2-17f2a627cc7c&gt; in &lt;module&gt;</span>\n<span class=\"c1\"># ----&gt; 1 (x**2 for x in range(10))[:4]</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># TypeError: 'generator' object is not subscriptable</span>\n</pre></div>\n<p>But you can with <a href=\"https://docs.python.org/3.7/library/itertools.html#itertools.islice\"><code>islice</code></a>:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)),</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># [0, 1, 4, 9]</span>\n</pre></div>\n<p>And this works great with iterators where you care about the current state:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">to_10_sq</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">to_10_sq</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># [0, 1, 4, 9]</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">to_10_sq</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># [16, 25, 36, 49]</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">to_10_sq</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># [64, 81]</span>\n</pre></div>\n<p>Which leads us to the most straightforward way of building up those chunks.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">))</span>\n</pre></div>\n<p>(The chunks have to be \u201cconcrete\u201d sequences as the problem requires some length-checking for one of the bonus parts, hence the <code>list</code> call.)</p>\n<p>Thanks for reading. If I have some key messages, they\u2019re these:</p>\n<ul>\n<li>Python is lovely, but it\u2019s not magic!</li>\n<li><a href=\"https://docs.python.org/3.7/library/itertools.html#module-itertools\"><code>itertools</code></a> might have solved your iteration problem already.</li>\n<li>Check out <a href=\"https://www.pythonmorsels.com\">Python Morsels</a>. The problems are short, fun, and a nice way to improve your Python skills.</li>\n</ul>",
      "date_published": "2019-06-18T00:23:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/06/hardware-choices/",
      "url": "https://robjwells.github.io/2018/06/hardware-choices/",
      "title": "Hard(ware) choices",
      "content_html": "<p>It looks like my 2011 iMac might be on the way out. I\u2019ve been having odd graphical problems today and yesterday, and I think that it might be the graphics card overheating. Running Apple Diagnostics (Hardware Test as was) reports an error with the hard drive (<a href=\"https://www.ifixit.com/Answers/View/488225/Apple+Hardware+Test+Result+%3A+4M0T-4-40000003%3A+HDD-1510\">the fan specifically</a>) which I\u2019ve seen before. My working theory at this point is that a failed or obstructed fan coupled with dust build-up and the fairly hot room has led to this point.</p>\n<p class=\"full-width\">\n<img alt=\"Photo of an iMac where part of the right-hand section of the screen image is displayed physically on the left\" src=\"https://robjwells.github.io/images/2018-06-10-imac-graphics-problem.jpeg\"/>\n</p>\n<p>I\u2019m going to get some compressed air and see if that helps matters at all, and then see if I can get it serviced. Unfortunately Apple now lists the 2011-model iMac as obsolete (or \u201cvintage\u201d) so we\u2019ll see how that goes.</p>\n<p>Funnily enough, this is not the original graphics card but a replacement installed by Apple when something similar (but not quite the same) happened several years ago, sorted out just before their replacement period ended (it was an acknowledged, somewhat widespread problem with the cards).</p>\n<p>Honestly it\u2019s happened at a bit of a naff time. The machine is otherwise fine, and it still feels incredibly fast (which I put down to the SSD). I was hoping it would last as long as many of the machines we have at work, almost all of which are from 2008 (despite what other press reports claim), though they do feel sluggish \u2014 particularly the couple that I (foolishly) upgraded past OS X 10.6. I was certainly not planning to replace it yet.</p>\n<p>It would be an expense that I could do without too \u2014 having just bought <a href=\"https://www.back2.co.uk/okamura-cp-mesh-chair-black-silver-frame.html\">a real chair</a> and <a href=\"https://www.kinesis-ergo.com/shop/advantage2/\">weird keyboard</a> in anticipation of having to do much more work at home from October when I start an evening Masters in Computer Science at <a href=\"http://www.birkbeck.ac.uk/\">Birkbeck</a>.</p>\n<p>Which brings us neatly to the real annoyance about this: I was planning to buy a laptop to use on the course. I\u2019ve bought a couple of bottom-end MacBook Airs for reporters at work, and they seem like decent enough machines. This idea was on the assumption that it would not be my main computer, so it could be less capable as I would be using it for focused tasks and leaving everything else \u2014 including much of the academic work of the course \u2014 to be done on my giant iMac at home.</p>\n<p>But if the iMac isn\u2019t in the picture anymore, what should I do? As I see it, I have two feasible options:</p>\n<ul>\n<li>Buy a more capable laptop as my main computer.</li>\n<li>Buy a basic laptop and a new iMac.</li>\n</ul>\n<p>I spent a lot of money on the 27\" iMac in October 2011, buying more than I needed really (partly because I was still playing computer games then). I wouldn\u2019t replace it with something as high-end now as I know that I just don\u2019t need the power, and I want to minimise the hit to my savings. </p>\n<p>Part of me thinks that I should buy a MacBook Air now, according to plan but sooner than planned. Then I have something to tide me over other than a six-year-old iPad (running iOS 9!) and a five-year-old iPhone 5S, and then I can try to get the iMac fixed or replace it at a later date. (I\u2019m also a bit anxious to buy the Air sooner rather than later, even though it\u2019s still basically an old design, as I don\u2019t really want to risk having to buy a laptop with a <a href=\"https://theoutline.com/post/2402/the-new-macbook-keyboard-is-ruining-my-life\">dodgy keyboard</a> and only a couple of those odd USB-C sockets.)</p>\n<p>Then the other option is to shelve completely the idea of buying another desktop and just buy a more powerful laptop. This appeals to me less, because I do want a bigger screen and I do want more storage.</p>\n<p>I\u2019ve been throwing the storage matter around in my head today and I can\u2019t decide on a position. Backblaze tells me I have 530GB backed up, most of which is my iTunes library, so I don\u2019t know if it\u2019s a bit of a distraction \u2014 if I only had a laptop I\u2019d have to keep it on an external drive at home, and is that so different from keeping it only in an iMac on my desk?</p>\n<p>It\u2019s difficult to know what to do. My gut feeling is to rush out and buy a basic Air immediately so as to not interrupt my life too much (particularly, I need to change jobs before the course starts as the hours don\u2019t fit; this is not a secret to my boss or colleagues).</p>\n<p>But my head says that I should see if I can crack on using my iPad for now, enquire about getting the iMac serviced as soon as possible, and then make a more considered decision at a later time.</p>\n<p>It\u2019s not a comfortable position for me, since this machine has been a fixture in my life for over six-and-a-half years. When the graphics card went last time, it was calming to know that it was a problem that Apple had committed to take care of (even if I almost missed the cutoff and had to drag the heavy thing all the way to Chafford Hundred on the train). No such luck this time.</p>\n<p>(On a, er, positive note, I guess this will finally force me to work out a way of blogging from my iPad that isn\u2019t as painful as I\u2019m sure it will be to get this post up. [Later: It took some faffing about and too much manual work, but having (an old version of) Coda and shell access to my Linode server did the trick fine.])</p>",
      "date_published": "2018-06-10T21:50:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/jupyter-notebook-macro-bug/",
      "url": "https://robjwells.github.io/2018/05/jupyter-notebook-macro-bug/",
      "title": "Jupyter notebook macro bug",
      "content_html": "<p>My post detailing <a href=\"https://robjwells.github.io/2018/05/open-jupyter-notebooks-with-a-keyboard-maestro-macro/\">a Keyboard Maestro macro to open Jupyter notebooks</a> had a dumb bug in the second shell pipeline, which fetches the URL of the desired notebook.</p>\n<p>You\u2019d hit it if:</p>\n<ul>\n<li>You have more than one notebook server running.</li>\n<li>The working directory of one is beneath another.</li>\n<li>The subdirectory server was started more recently.</li>\n<li>You tried to open the parent server with the macro.</li>\n</ul>\n<p>The shorter path of the parent would match part of the child\u2019s path.</p>\n<p>The original <code>grep</code> pattern was:</p>\n<div class=\"syntax\"><pre><span></span>grep <span class=\"s2\">\"</span><span class=\"nv\">$KMVAR_dir</span><span class=\"s2\">\"</span>\n</pre></div>\n<p>And is now:</p>\n<div class=\"syntax\"><pre><span></span>grep <span class=\"s2\">\":: </span><span class=\"nv\">$KMVAR_dir</span>$<span class=\"s2\">\"</span>\n</pre></div>\n<p>So that it only matches the exact directory chosen in the list prompt, and not one of its children.</p>\n<p>I\u2019ve updated <a href=\"https://robjwells.github.io/files/OpenJupyterNotebook.kmmacros\">the Keyboard Maestro macro file</a> too.</p>",
      "date_published": "2018-05-22T09:47:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/html-image-dimensions-with-a-css-border/",
      "url": "https://robjwells.github.io/2018/05/html-image-dimensions-with-a-css-border/",
      "title": "HTML image dimensions with a CSS border",
      "content_html": "<p>When I use images here, I tend to give ones without any transparency a border, which is done using CSS and applied to <code>img</code> tags unless they have a <code>no-border</code> class.</p>\n<p>Like a good web citizen, I also <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#example-82f39213\">specify image dimensions in HTML</a>:</p>\n<blockquote>\n<p>\u201cThe image\u2019s rendered size is given in the width and height attributes, which allows the user agent to allocate space for the image before it is downloaded.\u201d</p>\n</blockquote>\n<p>In fact my BBEdit <code>image</code> snippet makes it a doddle:</p>\n<pre><code>&lt;p &lt;#* class=\"full-width\"#&gt;&gt;\n    &lt;img\n        src=\"/images/#SELECTIONORINSERTION#\"\n        alt=\"&lt;#alt text#&gt;\"\n        &lt;#* class=\"no-border\"#&gt;\n        width=&lt;#width#&gt;\n        height=&lt;#height#&gt;\n        /&gt;\n&lt;/p&gt;</code></pre>\n<p>But this causes a problem, which I\u2019ve spotted in a couple of my recent posts.</p>\n<p>If you specify the image dimensions, and use a CSS border, <em>and</em> have your CSS <code>box-sizing</code> set to <code>border-box</code>, then the CSS border shrinks the amount of space available to the image to its specified dimensions \u2212 2 \u00d7 the border width.</p>\n<p>So if you specify your <code>img</code> dimensions to match the dimensions of the file, then the image itself will be shrunk within the element.</p>\n<p>This animation shows this situation, and what happens when you toggle the CSS border. Watch what happens to the image itself.</p>\n<p class=\"full-width\">\n<img alt=\"An animation showing an image being squeezed within the space it has been allocated, causing distortion.\" class=\"no-border\" height=\"385\" src=\"https://robjwells.github.io/images/2018-05-17-border-with-dimensions.gif\" width=\"565\"/>\n</p>\n<p>(It\u2019s got a slight offset from the text because it\u2019s a screenshot of this blog and includes some of the background on each side.)</p>\n<p>In contrast, this animation shows what happens when the dimensions are not specified, and so the image is free to grow when the border is applied:</p>\n<p class=\"full-width\">\n<img alt=\"An animation showing an image growing when a CSS border is applied, with no distortion to the image itself.\" class=\"no-border\" height=\"385\" src=\"https://robjwells.github.io/images/2018-05-17-border-no-dimensions.gif\" width=\"565\"/>\n</p>\n<p>Really the culprit here is <code>box-sizing: border-box</code>, forcing the border to remain within the size of the <code>img</code> element itself. This is a behaviour you actually want, as it solves the old CSS problem of juggling widths, borders and padding within a parent element. Check out <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\">MDN\u2019s <code>box-sizing</code> page</a> to see what I mean.</p>\n<p>What are my options, then?</p>\n<ul>\n<li>\n<p>Change box-sizing.</p>\n<p>I\u2019m not touching this because the potential sizing headaches are not worth it, even just for <code>img</code> elements.</p>\n</li>\n<li>\n<p>Apply a border to the image files themselves.</p>\n<p>No, because if I change my mind about the CSS, previously posted images are stuck with the old style forever. CSS borders should also work correctly across high-density displays, whereas a 1px border in the file may not.</p>\n</li>\n<li>\n<p>Don\u2019t specify dimensions in the HTML.</p>\n<p>I don\u2019t like the idea of making pages of this site slower to render, but I think this is the least bad option, particularly given that <a href=\"https://robjwells.github.io/2017/04/page-speed/\">this site is already pretty fast</a>.</p>\n</li>\n</ul>\n<p>It\u2019s not ideal, but that BBEdit snippet is now just:</p>\n<pre><code>&lt;p &lt;#* class=\"full-width\"#&gt;&gt;\n    &lt;img\n        src=\"/images/#SELECTIONORINSERTION#\"\n        alt=\"&lt;#alt text#&gt;\"\n        &lt;#* class=\"no-border\"#&gt;\n        /&gt;\n&lt;/p&gt;</code></pre>\n<p>Hey, at least it makes images quicker to include in posts!</p>",
      "date_published": "2018-05-17T21:00:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/open-jupyter-notebooks-with-a-keyboard-maestro-macro/",
      "url": "https://robjwells.github.io/2018/05/open-jupyter-notebooks-with-a-keyboard-maestro-macro/",
      "title": "Open Jupyter notebooks with a Keyboard Maestro macro",
      "content_html": "<p>I have a startup item that launches a Jupyter notebook so that the server is always running in the background. It\u2019s an attempt to reduce the friction of using the notebooks.</p>\n<p>By default, Jupyter starts the server on port 8888 on localhost, but expects a token (a long hexadecimal string) before it\u2019ll let you in. If you list the currently running servers in the terminal you can see the token and also the server\u2019s working directory.</p>\n<div class=\"syntax\"><pre><span></span>% jupyter-notebook list\nCurrently running servers:\nhttp://localhost:8889/?token<span class=\"o\">=</span>\u2026hex\u2026 :: /Users/robjwells\nhttp://localhost:8888/?token<span class=\"o\">=</span>\u2026hex\u2026 :: /Users/robjwells/jupyter-notebooks\n</pre></div>\n<p>We can use this to make finding and opening the particular notebook server you want a bit easier, using Keyboard Maestro.</p>\n<p>\n<img alt=\"A screenshot showing the (minimised) Keyboard Maestro steps\" src=\"https://robjwells.github.io/images/2018-05-17-macro-overview.png\"/>\n</p>\n<p>The macro uses the <code>jupyter-notebook</code> command, so that\u2019ll need to be in your <code>$PATH</code> as Keyboard Maestro sees it.</p>\n<p>The first and third steps both execute <code>jupyter-notebook list</code> and use Unix tools to extract parts from it.</p>\n<p>In between, if there\u2019s more than one notebook server running, the macro prompts the user to choose one from a list of their working directories.</p>\n<p>\n<img alt=\"A Keyboard Maestro list selection dialogue\" class=\"no-border\" height=\"464\" src=\"https://robjwells.github.io/images/2018-05-17-notebook-list.png\" width=\"534\"/>\n</p>\n<p>Here\u2019s the first step, where we fetch the list of working directories.</p>\n<div class=\"syntax\"><pre><span></span>jupyter-notebook list <span class=\"p\">|</span> tail -n +2 <span class=\"p\">|</span> awk <span class=\"s1\">'{print $3}'</span>\n</pre></div>\n<p>Our +2 argument to <code>tail</code> gets the output from the second line, chopping off the \u201cCurrently running servers:\u201d bit. Then <code>awk</code> prints the third field, which contains the directory. (The first is the URL, the second the double-colon separator.)</p>\n<p>The third step fetches the corresponding URL for a directory:</p>\n<div class=\"syntax\"><pre><span></span>jupyter-notebook list <span class=\"p\">|</span> grep <span class=\"s2\">\":: </span><span class=\"nv\">$KMVAR_dir</span>$<span class=\"s2\">\"</span> <span class=\"p\">|</span> awk <span class=\"s1\">'{ print $1 }'</span>\n</pre></div>\n<p>Since the user has specified a directory already, we use <code>grep</code> with the Keyboard Maestro variable to find just that one line, and use <code>awk</code> again to extract the URL field.</p>\n<div class=\"flag\" id=\"update-20180522\">\n<p><strong>Update: <time>2018-05-22</time></strong></p>\n<p>There was a bug in the original version of this snippet of shell script, where a parent path could match a child path (as it was only looking for the path itself without an anchor on either side). It was only luck that had me miss this with my example, with the more recently started home directory notebook server being listed ahead of one in a subdirectory, which <code>grep</code> would have also matched. The code above and the macro file have been fixed.</p>\n</div>\n<p>Obviously, this won\u2019t work if you have more than one notebook server running from the same directory. (But you wouldn\u2019t do that, right?)</p>\n<p><a href=\"https://robjwells.github.io/files/OpenJupyterNotebook.kmmacros\">Here\u2019s the macro file</a> if you\u2019d like to try it out.</p>",
      "date_published": "2018-05-17T19:45:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/horizontally-scroll-a-table-in-html/",
      "url": "https://robjwells.github.io/2018/05/horizontally-scroll-a-table-in-html/",
      "title": "Horizontally scroll a table in HTML",
      "content_html": "<p>After I published <a href=\"https://www.robjwells.com/2018/05/table-manipulation-with-r/\">my post about manipulating tables (of data) in R</a>, I noticed that there was something amiss with the HTML table in that post showing an example section of our newsroom rota.</p>\n<p class=\"full-width\">\n<img alt=\"A screenshot showing a table laid out with table-layout: fixed in CSS, with many cells wrapping with scrollbars in an unreadable fashion.\" src=\"https://robjwells.github.io/images/2018-05-11-table-fixed.png\"/>\n</p>\n<p>When I first wrote the CSS for this site, <a href=\"https://www.robjwells.com/2013/07/five-different-kinds-of-grey/\">roughly five years ago</a>, I had HTML tables set so that the whole table would scroll were it to be too wide for its containing column. At least, I\u2019m pretty sure it worked like that.</p>\n<p>Anyway, as you can see above, it doesn\u2019t work like that now. The table there is laid out with the following CSS:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nt\">table</span> <span class=\"p\">{</span>\n  <span class=\"k\">table-layout</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n<p>Which has the effect of restricting the table size to 100%, and doing odd things to the cells if there\u2019s too much to fit in whatever width 100% happens to be.</p>\n<p>As an attempted quick fix, I removed the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\"><code>table-layout</code></a> property so that it would inherit the default, <code>auto</code>. The width is still 100% to provide some consistency, rather than having an odd assortment of table widths.</p>\n<p>So the CSS is now this:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nt\">table</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n<p>This has the effect of having the table overflow the container horizontally if the content is too wide, like so:</p>\n<p class=\"full-width\">\n<img alt=\"A screenshot showing a table laid out with table-layout: auto in CSS, with the table overflowing its container horizontally.\" src=\"https://robjwells.github.io/images/2018-05-11-table-auto.png\"/>\n</p>\n<p>Which is perhaps more readable if pretty ugly. And not what I wanted: to scroll the entire table within its container.</p>\n<p>I said attempted earlier because I, er, never deployed the change on the site (it\u2019s been a busy couple of weeks, contrary to the post tempo).</p>\n<p>In the meantime, I stumbled across a fix by opening Safari\u2019s reader mode, in which tables scroll horizontally within their container! The secret? The table is wrapped in an enclosing <code>div</code>, which has its <code>overflow-x</code> property set to <code>auto</code>, and then the table scrolls within the div.</p>\n<p>Here\u2019s what that looks like when rendered:</p>\n<p class=\"full-width\">\n<img alt=\"A screenshot showing a table laid out and scrolling within a containing div with its overflow-x property set to auto.\" src=\"https://robjwells.github.io/images/2018-05-11-table-div.png\"/>\n</p>\n<p>Here\u2019s the HTML:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"table-container\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n  \u2026\n  <span class=\"p\">&lt;/</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n<p>And here\u2019s the CSS:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nt\">table</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">table-container</span> <span class=\"p\">{</span>\n  <span class=\"k\">overflow-x</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n<p>You want <code>auto</code> instead of <code>scroll</code> as the latter shows the scrollbar all the time. </p>",
      "date_published": "2018-05-11T23:35:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/table-manipulation-with-r/",
      "url": "https://robjwells.github.io/2018/05/table-manipulation-with-r/",
      "title": "Table manipulation with R",
      "content_html": "<p>One of my responsibilities at work is to provide a list of people who our printers should call if there\u2019s ever a problem with the edition. Usually that\u2019s the chief sub, or whoever is covering her.</p>\n<p>I also prepare the rota for the journalistic staff, which I use as the source of information for the responsibility list.</p>\n<p>This job has largely escaped automation. I do have a Python script that prints a nice template report for the week ahead, complete with BBEdit placeholders, but working out whose name should be attached to each edition is just done by reading the rota across and deleting names from the template list until you\u2019re down to one.</p>\n<p>However, I\u2019ve found things of this nature, if not automated, are put off, forgotten, or done wrong. This, because it\u2019s not actually vital to anything, is no exception, particularly when I\u2019m pulled into jobs that actually are vital.</p>\n<p>The report looks a little like this, so you get the idea:</p>\n<pre><code>Tue May 08    16pp    Alice Jones\nWed May 09    16pp    Bob Smith\nThu May 10    16pp    Rob Wells</code></pre>\n<p>And so on, with the pagination in the middle column.</p>\n<p>The pagination is consistent (16 in the week, 24 on the weekend) with occasional larger editions. It can either be predicted with total certainty or none at all, as the large editions vary considerably with advertising and feature articles.</p>\n<p>The responsibility can\u2019t be predicted because we don\u2019t work fixed patterns (we don\u2019t have enough staff to do so). However, it can be done in advance once the newsroom rota is completed.</p>\n<p>So let\u2019s forget the pagination and just focus on pulling together a list of every production day in the completed period and who is the chief sub.</p>\n<p>Our newsroom rota is just a spreadsheet, which is actually the best tool I\u2019ve found so far for handling a couple dozen people with intricate job-cover links between them. (The rota used to be laid out in InDesign, which, no matter what you think about spreadsheets or InDesign, was much more difficult.)</p>\n<p>It looks a bit like this (the real spreadsheet has proper formatting and so on):</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sun 6/5</th>\n<th>Mon 7/5</th>\n<th>Tue 8/5</th>\n<th>Wed 9/5</th>\n<th>Thu 10/5</th>\n<th>Fri 11/5</th>\n<th>Sat 12/5</th>\n<th>Lieu add</th>\n<th>Lieu tot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Rob Wells</td>\n<td>Off</td>\n<td></td>\n<td></td>\n<td>Sport</td>\n<td>Ch Sub</td>\n<td>Sport</td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td>Alice Jones</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Off</td>\n<td></td>\n<td></td>\n<td>0.25</td>\n<td>4.5</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>There\u2019s a fair amount of information: names, dates, days off, cover responsibilities, new and accrued <a href=\"https://www.gov.uk/overtime-your-rights/time-off-and-paid-leave\">TOIL</a>. It\u2019s entirely designed for humans, not computers (and it takes the humans a little while until they\u2019re able to read it).</p>\n<p>A lot is implicit. If we assume in this example that Alice is the chief sub, she is performing that role on her usual working days (the empty cells). It is only marked for people who have to cover someone else\u2019s job.</p>\n<p>This table is not something that you can just chuck into a computer program; it needs cleaning up first.</p>\n<p>Thankfully, R (and the <a href=\"https://www.tidyverse.org\">Tidyverse</a> particularly) is a great environment in which to wrangle your data, and to do so fairly quickly. All the code below was pulled together in about 30 minutes total (with a good 10 minutes of reading documentation and fixing errors in the original source data). Writing this post has taken much longer.</p>\n<p>In our example below we\u2019re going to have four workers who each cover the chief sub at different times. Here we\u2019re going make \u201cDan Taylor\u201d the chief sub. Congratulations, Dan!</p>\n<p>First we\u2019ll pull in our libraries.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">tidyverse</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">lubridate</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">stringr</span><span class=\"p\">)</span>\n</pre></div>\n<p>Then we\u2019ll read in the data, which is saved in a TSV file after copying and pasting from the spreadsheet into a text document. We\u2019ll select only the production days and the unnamed first column (named X1 on import), excluding Saturdays and the TOIL columns.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">wide</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">read_tsv</span><span class=\"p\">(</span><span class=\"s\">'chsub.tsv'</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">'^(Mon|Tue|Wed|Thu|Fri|Sun) |X1'</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">X1</span><span class=\"p\">)</span>\n</pre></div>\n<p>Then we\u2019ll use a <a href=\"http://tidyr.tidyverse.org\">tidyr</a> function, <a href=\"http://tidyr.tidyverse.org/reference/gather.html\"><code>gather()</code></a>, to transform our wide format into a tall one by selecting the date columns. It\u2019s easier to get a feel for <code>gather()</code> by looking at the output.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">tidy</span> <span class=\"o\">&lt;-</span> <span class=\"n\">wide</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">'^(Mon|Tue|Wed|Thu|Fri|Sun) '</span><span class=\"p\">),</span>\n           <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">,</span>\n           <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">tidy</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 3\n##   name           date     status\n##   &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;\n## 1 Alice Jones    Sun 29/4 Off\n## 2 Bob Smith      Sun 29/4 Sick\n## 3 Carol Williams Sun 29/4 Booked\n## 4 Dan Taylor     Sun 29/4 &lt;NA&gt;\n## 5 Alice Jones    Mon 30/4 &lt;NA&gt;\n## 6 Bob Smith      Mon 30/4 Off</code></pre>\n<p>We now have a row for each person for each day, along with their \u201cstatus\u201d for the day.</p>\n<p>But Dan doesn\u2019t have his chief sub days marked, as it would be nearly every day. Let\u2019s split out Dan\u2019s rows and replace the empty cells with <code>Ch Sub</code>, the same status string used by everyone else. Then we\u2019ll combine the filled-out Dan rows with all the non-Dan rows from the original data frame.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">dan_replaced</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s\">'Dan Taylor'</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">replace_na</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s\">'Ch Sub'</span><span class=\"p\">))</span>\n\n<span class=\"n\">all</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s\">'Dan Taylor'</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">rbind</span><span class=\"p\">(</span><span class=\"n\">dan_replaced</span><span class=\"p\">)</span>\n\n<span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"n\">all</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 3\n##   name       date      status\n##   &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;\n## 1 Dan Taylor Sun 30/12 Ch Sub\n## 2 Dan Taylor Mon 31/12 Ch Sub\n## 3 Dan Taylor Tue 1/1   Ch Sub\n## 4 Dan Taylor Wed 2/1   Ch Sub\n## 5 Dan Taylor Thu 3/1   Ch Sub\n## 6 Dan Taylor Fri 4/1   Ch Sub</code></pre>\n<p>Great. But poor Dan, he\u2019s working every day over New Year 2018-2019. In reality, I haven\u2019t done that far on the rota, just up to October. We\u2019ll convert all those dates now, and filter out all the newly missing entries where the month was outside our range.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">dated</span> <span class=\"o\">&lt;-</span> <span class=\"n\">all</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">mutate</span><span class=\"p\">(</span>\n        <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"nf\">dmy</span><span class=\"p\">(</span><span class=\"nf\">str_c</span><span class=\"p\">(</span><span class=\"nf\">str_extract</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"s\">'\\\\d+/[4-9]'</span><span class=\"p\">),</span> <span class=\"s\">'/2018'</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">))</span>\n</pre></div>\n<p>Let\u2019s get only the chief sub-related rows and sort them by date.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">chsub</span> <span class=\"o\">&lt;-</span> <span class=\"n\">dated</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"s\">'Ch Sub'</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">arrange</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">chief_sub</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">chsub</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 2\n##   date       chief_sub\n##   &lt;date&gt;     &lt;chr&gt;\n## 1 2018-04-29 Dan Taylor\n## 2 2018-04-30 Dan Taylor\n## 3 2018-05-01 Dan Taylor\n## 4 2018-05-02 Bob Smith\n## 5 2018-05-03 Dan Taylor\n## 6 2018-05-04 Carol Williams</code></pre>\n<p>Exactly what we want. Now time for a bit of formatting to make this giant list somewhat acceptable for other people. This is also where my knowledge of R runs out.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">formatted</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">str_c</span><span class=\"p\">(</span>\n    <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">chsub</span><span class=\"o\">$</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"s\">'%a %Y-%m-%d'</span><span class=\"p\">),</span>\n           <span class=\"n\">chsub</span><span class=\"o\">$</span><span class=\"n\">chief_sub</span><span class=\"p\">,</span>\n           <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"s\">'  '</span><span class=\"p\">)</span>\n\n<span class=\"n\">fd</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">file</span><span class=\"p\">(</span><span class=\"s\">'output.txt'</span><span class=\"p\">)</span>\n<span class=\"nf\">writeLines</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">,</span> <span class=\"n\">fd</span><span class=\"p\">)</span>\n<span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n</pre></div>\n<p>So we\u2019ll switch to Python, printing a blank line between each production week (of six days).</p>\n<div class=\"syntax\"><pre><span></span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.txt'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()):</span>\n        <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">%</span> <span class=\"mi\">6</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>Sun 2018-08-19  Carol Williams\nMon 2018-08-20  Carol Williams\nTue 2018-08-21  Alice Jones\nWed 2018-08-22  Carol Williams\nThu 2018-08-23  Carol Williams\nFri 2018-08-24  Carol Williams\n\nSun 2018-08-26  Carol Williams\nMon 2018-08-27  Carol Williams\nTue 2018-08-28  Carol Williams\nWed 2018-08-29  Dan Taylor\nThu 2018-08-30  Dan Taylor\nFri 2018-08-31  Dan Taylor</code></pre>\n<p>Perfect. And ready for whenever I get time to update the rota again.</p>",
      "date_published": "2018-05-08T23:15:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/working-with-r-markdown/",
      "url": "https://robjwells.github.io/2018/05/working-with-r-markdown/",
      "title": "Working with R Markdown",
      "content_html": "<p>I\u2019ve just published an update to <a href=\"https://www.robjwells.com/2018/05/3-75-years-on-the-tube/\">my recent Tube travel post</a>, fixing a few small mistakes, a bigger one (an error in a station name that nonetheless didn\u2019t affect the plot involved) and adding an update to the last section which goes a bit deeper into the fare and duration difference between the two periods.</p>\n<p>I didn\u2019t fix the mistake in the title, as I felt it was too late, but of course it\u2019s 3\u2154 years, not 3.75, since September 2014.</p>\n<p>\n<video controls=\"\" muted=\"\" poster=\"https://robjwells.github.io/images/2018-05-05-naked-gun-realise-that-now.jpg\" src=\"https://robjwells.github.io/images/2018-05-05-naked-gun-realise-that-now.mp4\">\n<img alt=\"\u201cI realise that, now\u2026\u201d from the film Naked Gun\" src=\"https://robjwells.github.io/images/2018-05-05-naked-gun-realise-that-now.jpg\"/>\n</video>\n</p>\n<p>In that post I mentioned how pleasant it is working in <a href=\"https://www.rstudio.com/products/RStudio/\">R Studio</a> in a <a href=\"https://rmarkdown.rstudio.com\">R Markdown</a> document. It really is, and I find the R Markdown way of mixing prose and code much more natural and fluid than <a href=\"https://jupyter.org\">Jupyter notebooks</a>, which I like the idea of but find the block-based method a bit awkward.</p>\n<p>The biggest problem with R Markdown was fitting it into my, admittedly arcane, <a href=\"https://github.com/robjwells/majestic\">blogging system</a>. To do so, I\u2019ve cooked up <a href=\"https://github.com/robjwells/primaryunit/blob/3be7c91007f10946e60fecb3c2007f85080d3950/posts/2018/04/decode_blocks.py\">a short Python script</a> to transform the Markdown output from R Studio and <a href=\"https://yihui.name/knitr/\">knitr</a>.</p>\n<p>Right now, I\u2019ve settled on this set of output options in the YAML front-matter:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nt\">md_document</span><span class=\"p\">:</span>\n    <span class=\"nt\">variant</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">markdown_strict+fenced_code_blocks</span>\n    <span class=\"nt\">preserve_yaml</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">fig_width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">7.5</span>\n    <span class=\"nt\">fig_height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5</span>\n    <span class=\"nt\">dev</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">svg</span>\n    <span class=\"nt\">pandoc_args</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span>\n        <span class=\"s\">\"--wrap\"</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">\"preserve\"</span>\n    <span class=\"p p-Indicator\">]</span>\n</pre></div>\n<p>Now I don\u2019t actually use fenced (<code>~~~~</code>) code blocks in Markdown, instead I just use regular Markdown indented code blocks with a header line (<code>python:</code>) at the top. But I include that extension in the Markdown variant to make it easier to transform code blocks later.</p>\n<p>But why? Well, if your output just uses indented code blocks, it\u2019s difficult to tell which of those are your R code and which are the R code\u2019s output. Fencing the blocks makes it easier to insert empty comments after each block, keeping code and output separate.</p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> front matter is preserved as I use a similar thing in my own posts and this gets passed through to my blogging system without a problem, with unknown settings ignored. (I do remove the quoting that the template file includes around strings.)</p>\n<p>The other important option above is supplying the <code>--wrap</code> argument to <a href=\"http://pandoc.org\">Pandoc</a>, preserving the line breaks as they are in the source file instead of breaking them. By default Pandoc hard-wraps the lines, which I\u2019d be fine with, except that it hard wraps the alt text for images (plots).</p>\n<p>That makes it more difficult to pick out later. This is necessary as I always use HTML to include images in my posts (so I can set classes, allow for full-width etc).</p>\n<p>I say more difficult as I\u2019m working line-wise. It\u2019d be possible to apply a regex to the joined lines and make the transformation, but then again I don\u2019t hard-wrap my own posts so it\u2019s not something I care about keeping.</p>\n<p>The option I would like to use is to keep my Markdown reference links intact, instead of having Pandoc put everything inline. But this makes the images into reference links, making rewriting more difficult again.</p>\n<p>So, I knit the document together from R Studio, then apply <a href=\"https://github.com/robjwells/primaryunit/blob/3be7c91007f10946e60fecb3c2007f85080d3950/posts/2018/04/decode_blocks.py\">the script</a>, and pipe the output into the for-real .md file. This is the one that gets checked into the <a href=\"https://www.mercurial-scm.org\">Mercurial</a> repository, fed into my blog generator and ultimately published.</p>\n<p>I could probably get away with doing less, or handling things differently \u2014 such as allowing for fenced code on the generator\u2019s side.</p>\n<p>But I want the transformed output to resemble as closely as possible something that I\u2019d written in <a href=\"https://www.barebones.com/products/bbedit/\">BBEdit</a> because I actually attach some importance to the contents of the Markdown files outside their use as raw material with which to create HTML.</p>\n<p>They should be able to tell the post\u2019s story without needing to be processed further, to interpret R code or make the raw source readable. I\u2019m not quite at the point of having totally pure, completely readable plain text files (note those dummy comments mentioned above) but I want to be as close as I can.</p>",
      "date_published": "2018-05-05T23:55:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/05/3-75-years-on-the-tube/",
      "url": "https://robjwells.github.io/2018/05/3-75-years-on-the-tube/",
      "title": "3.75 years on the Tube",
      "content_html": "<p>A couple of years ago, shortly after I moved house, I wrote <a href=\"https://robjwells.github.io/2016/09/two-years-on-the-tube/\">a post analysing my Tube travel</a>. It was my first real attempt to do that kind of analysis, and the first time I\u2019d done anything with <a href=\"https://matplotlib.org\">Matplotlib</a> of any level of complexity.</p>\n<p>I thought I\u2019d have another crack at it now, looking at the changes in my travel patterns since the move, and also changing from Python and Matplotlib to R and ggplot2.</p>\n<p>Why now? There\u2019s no great immediate reason, though for a time I was thinking about stopping to use my Oyster card in favour of a contactless bank card. You don\u2019t have the option to be emailed CSV journey history files with a bank card, and the main advantage of weekly capping wouldn\u2019t affect me, so I\u2019ll be sticking with the Oyster card for the moment.</p>\n<p>But, as I noted in the introduction to the previous post, my travel habits have changed considerably. Before I would commute by train twice a day, whereas now I\u2019m within a short cycle of work. I\u2019m expecting this to have a significant effect in what we observe below.</p>\n<p>And why the switch in environment? Python is still the language that fits my brain the best, but Matplotlib feels like hard work. R is a pretty odd language in many ways, but the ggplot2 way of building plots makes a great deal of sense to me, and has allowed me to play with plots quickly in ways that I feel that wouldn\u2019t be available if I was trying to contort to fit Matplotlib\u2019s preferences. I freely admit that I don\u2019t have a great deal of experience with Matplotlib, so it\u2019s entirely possible that\u2019s the reason why I find it a struggle, but that barrier just isn\u2019t there with ggplot2.</p>\n<p>I\u2019m writing this post in <a href=\"https://www.rstudio.com/products/RStudio/\">RStudio</a> in a <a href=\"https://rmarkdown.rstudio.com\">R Markdown</a> document, but it\u2019s actually my second go at this. The first was invaluable in getting myself acquainted with the process and playing around with ideas, but it kind of spiralled out of control so it\u2019s not presentable. Hopefully this is something approaching readable.</p>\n<h3>Setup</h3>\n<p>To start with we\u2019re going to load some libraries to make our life easier. The <a href=\"https://www.tidyverse.org\">Tidyverse</a> wraps up several helpful packages; lubridate has some handy date-handling functions; stringr is helpful for, er, strings; patchwork allows you to easily combine plots into one figure; ggalt provides an extra geom (<code>geom_encircle()</code>) that we\u2019ll use in a bit. Forgive me for not making clear where functions come from below as, like Swift, R imports into the global namespace.</p>\n<p>Not shown is my customised ggplot2 theme, which you can find if you <a href=\"https://github.com/robjwells/primaryunit/tree/master/posts/2018/04\">look at the original .Rmd source file</a>.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">tidyverse</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">lubridate</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">stringr</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">patchwork</span><span class=\"p\">)</span>\n<span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"n\">ggalt</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Moving average function from https://stackoverflow.com/a/4862334/1845155</span>\n<span class=\"n\">mav</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">stats</span><span class=\"o\">::</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">/</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">sides</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<h3>Data import</h3>\n<p>I keep all the CSV files as received, just dating the filenames with the date I got them. (Sorry, I won\u2019t be sharing the data.) Let\u2019s load all the files:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">oyster_filenames</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">dir</span><span class=\"p\">(</span>\n    <span class=\"s\">'~/Documents/Oyster card/Journey history CSVs/'</span><span class=\"p\">,</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"s\">'*.csv'</span><span class=\"p\">,</span>\n    <span class=\"n\">full.names</span> <span class=\"o\">=</span> <span class=\"kc\">TRUE</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p>There are 109 CSV files that we need to open, load, and combine.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">oyster_data</span> <span class=\"o\">&lt;-</span> <span class=\"n\">oyster_filenames</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">~</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">.,</span> <span class=\"n\">skip</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"n\">rbind</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p>Here we\u2019re piping <code>oyster_filenames</code> through <code>map</code>, where we use an R formula to supply arguments to <code>read_csv</code> to skip the header line in each file. Finally we <code>reduce</code> the 109 data frames by binding them by row.</p>\n<h3>Poking around the data</h3>\n<p>We can take a look at the data to get an idea of its structure:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">oyster_data</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 8\n##   Date   `Start Time` `End Time` `Journey/Action`    Charge Credit Balance\n##   &lt;chr&gt;  &lt;time&gt;       &lt;time&gt;     &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n## 1 31-Oc\u2026 23:22        23:50      North Greenwich to\u2026    1.5 &lt;NA&gt;     26.0 \n## 2 31-Oc\u2026 18:39        18:59      Woolwich Arsenal D\u2026    1.6 &lt;NA&gt;     27.6 \n## 3 31-Oc\u2026 18:39           NA      Auto top-up, Woolw\u2026   NA   20       29.2 \n## 4 31-Oc\u2026 17:10        17:37      Stratford to Woolw\u2026    1.6 &lt;NA&gt;      9.15\n## 5 31-Oc\u2026 16:26        16:53      Woolwich Arsenal D\u2026    1.6 &lt;NA&gt;     10.8 \n## 6 30-Oc\u2026 22:03        22:39      Pudding Mill Lane \u2026    1.5 &lt;NA&gt;     12.4 \n## # ... with 1 more variable: Note &lt;chr&gt;</code></pre>\n<p>It\u2019s clearly in need of a clean-up. The journey history file appears to be a record of every action involving the card. It\u2019s interesting to note that the Oyster card isn\u2019t just a \u201ckey\u201d to pass through the ticket barriers, but a core part of how the account is managed (note that having an online account is entirely optional).</p>\n<p>Actions taken \u201coutside\u201d of the card need to be \u201cpicked up\u201d by the card by tapping on an Oyster card reader. Here we can see a balance increase being collected, mixed in with the journey details. (Funnily enough, TfL accidentally cancelled my automatic top-up a couple of months ago, but that was never applied to my account as I didn\u2019t use the card before the action expired.)</p>\n<p>But we\u2019re only interested in rail journeys, one station to another, with a start and finish time.</p>\n<p>Let\u2019s see if the notes field can give us any guidance of what we may need to exclude.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">oyster_data</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">Note</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">Note</span><span class=\"p\">,</span> <span class=\"n\">sort</span> <span class=\"o\">=</span> <span class=\"kc\">TRUE</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 5 x 2\n##   Note                                                                   n\n##   &lt;chr&gt;                                                              &lt;int&gt;\n## 1 The fare for this journey was capped as you reached the daily cha\u2026    18\n## 2 We are not able to show where you touched out during this journey      6\n## 3 This incomplete journey has been updated to show the &lt;station&gt; yo\u2026     1\n## 4 We are not able to show where you touched in during this journey       1\n## 5 You have not been charged for this journey as it is viewed as a c\u2026     1</code></pre>\n<p>OK, not much here, but there are some troublesome rail journeys missing either a starting or finishing station. The \u201cincomplete journey\u201d line also hints at something to be aware of:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">oyster_data</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">Note</span><span class=\"p\">,</span> <span class=\"s\">'This incomplete journey'</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">first</span><span class=\"p\">()</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## [1] \"Woolwich Arsenal DLR to &lt;Blackheath [National Rail]&gt;\"</code></pre>\n<p>Note the angle brackets surrounding the substituted station. We\u2019ll come back to this later.</p>\n<p>A missing start or finish time is a giveaway for oddities, which overlaps somewhat but not completely with Journey/Action fields that don\u2019t match the pattern of <code>{station} to {station}</code>. Let\u2019s fish those out and have a look at the abbreviated descriptions:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">stations_regex</span> <span class=\"o\">&lt;-</span> <span class=\"s\">'^&lt;?([^&gt;]+)&gt;? to &lt;?([^&gt;]+)&gt;?$'</span>\n\n<span class=\"n\">oyster_data</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span>\n        <span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">`Start Time`</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n        <span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">`End Time`</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n        <span class=\"o\">!</span><span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">,</span> <span class=\"n\">stations_regex</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"n\">abbr</span> <span class=\"o\">=</span> <span class=\"nf\">str_extract</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">,</span> <span class=\"s\">'^[^,]+'</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">abbr</span><span class=\"p\">,</span> <span class=\"n\">sort</span> <span class=\"o\">=</span> <span class=\"kc\">TRUE</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 11 x 2\n##    abbr                                              n\n##    &lt;chr&gt;                                         &lt;int&gt;\n##  1 Auto top-up                                      84\n##  2 Bus journey                                      26\n##  3 Automated Refund                                  7\n##  4 Woolwich Arsenal DLR to [No touch-out]            3\n##  5 Oyster helpline refund                            2\n##  6 Unknown transaction                               2\n##  7 [No touch-in] to Woolwich Arsenal DLR             1\n##  8 Entered and exited Woolwich Arsenal DLR           1\n##  9 Monument to [No touch-out]                        1\n## 10 Stratford International DLR to [No touch-out]     1\n## 11 Stratford to [No touch-out]                       1</code></pre>\n<h3>Tidying the data</h3>\n<p>All these should be filtered out of the data for analysis. (The two unknown transactions appear to be two halves of my old commute. Strange.)</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">rail_journeys</span> <span class=\"o\">&lt;-</span> <span class=\"n\">oyster_data</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"c1\"># Note the !() below to invert the earlier filter</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span>\n        <span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">`Start Time`</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n        <span class=\"nf\">is.na</span><span class=\"p\">(</span><span class=\"n\">`End Time`</span><span class=\"p\">)</span> <span class=\"o\">|</span>\n        <span class=\"o\">!</span><span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">,</span> <span class=\"n\">stations_regex</span><span class=\"p\">)))</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p>That leaves us with 993 rail journeys to have a look at.</p>\n<p>But there\u2019s more tidying-up to do:</p>\n<ul>\n<li>Journey dates and times are stored separately. Finish times may be after midnight (and so on the day after the date they\u2019re associated with).</li>\n<li>Start and finish stations need to be separated. (And don\u2019t forget that set of angle brackets.)</li>\n<li>All money-related fields should be dropped except for \u201ccharge\u201d (the journey fare).</li>\n</ul>\n<p>Let\u2019s have a crack at it, proceeding in that order:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">tidy_journeys</span> <span class=\"o\">&lt;-</span> <span class=\"n\">rail_journeys</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">mutate</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"nf\">dmy_hms</span><span class=\"p\">(</span>\n            <span class=\"nf\">str_c</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"n\">`Start Time`</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s\">' '</span><span class=\"p\">),</span>\n            <span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"s\">'Europe/London'</span><span class=\"p\">),</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"nf\">dmy_hms</span><span class=\"p\">(</span>\n            <span class=\"nf\">str_c</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"n\">`End Time`</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s\">' '</span><span class=\"p\">),</span>\n            <span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"s\">'Europe/London'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n            <span class=\"c1\"># Add an extra day if the journey ends \u201cearlier\u201d than the start</span>\n            <span class=\"nf\">days</span><span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">`End Time`</span> <span class=\"o\">&lt;</span> <span class=\"n\">`Start Time`</span><span class=\"p\">)),</span>\n        <span class=\"c1\"># Let\u2019s add a duration to make our lives easier</span>\n        <span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n\n        <span class=\"n\">enter</span> <span class=\"o\">=</span> <span class=\"nf\">str_match</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">,</span> <span class=\"n\">stations_regex</span><span class=\"p\">)</span><span class=\"n\">[</span><span class=\"p\">,</span><span class=\"m\">2</span><span class=\"n\">]</span><span class=\"p\">,</span>\n        <span class=\"n\">exit</span> <span class=\"o\">=</span> <span class=\"nf\">str_match</span><span class=\"p\">(</span><span class=\"n\">`Journey/Action`</span><span class=\"p\">,</span> <span class=\"n\">stations_regex</span><span class=\"p\">)</span><span class=\"n\">[</span><span class=\"p\">,</span><span class=\"m\">3</span><span class=\"n\">]</span>\n    <span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">select</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">,</span>\n        <span class=\"n\">enter</span><span class=\"p\">,</span> <span class=\"n\">exit</span><span class=\"p\">,</span>\n        <span class=\"n\">fare</span> <span class=\"o\">=</span> <span class=\"n\">Charge</span>\n    <span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"c1\"># Sorting solely to correct the slightly odd example output</span>\n    <span class=\"nf\">arrange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 6\n##   start               end                 duration enter    exit      fare\n##   &lt;dttm&gt;              &lt;dttm&gt;              &lt;time&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;dbl&gt;\n## 1 2014-09-06 13:14:00 2014-09-06 13:42:00 28       Woolwic\u2026 Stratfo\u2026   1.5\n## 2 2014-09-06 13:59:00 2014-09-06 14:08:00 9        Stratfo\u2026 Hackney\u2026   1.5\n## 3 2014-09-06 20:47:00 2014-09-06 21:02:00 15       Hackney\u2026 Highbur\u2026   1.5\n## 4 2014-09-06 23:22:00 2014-09-07 00:10:00 48       Highbur\u2026 Woolwic\u2026   2.7\n## 5 2014-09-07 10:00:00 2014-09-07 10:30:00 30       Woolwic\u2026 Pudding\u2026   1.5\n## 6 2014-09-07 20:43:00 2014-09-07 21:15:00 32       Pudding\u2026 Woolwic\u2026   1.5</code></pre>\n<p>Great. The duration variable isn\u2019t strictly necessary but it\u2019ll make things a tad clearer later on.</p>\n<h3>Weekly totals</h3>\n<p>For a start, let\u2019s try to remake the first plot from <a href=\"https://robjwells.github.io/2016/09/two-years-on-the-tube/\">my previous post</a>, of weekly spending with a moving average.</p>\n<p>Looking back, it\u2019s not tremendously helpful, but it\u2019s a starting point. (In addition, while that plot is labelled as showing a six-week average, the code computes <a href=\"https://github.com/robjwells/primaryunit/blob/master/posts/2016/09/analyse_journey_history.py#L168\">an eight-week average</a>, and a quick count of the points preceding the average line confirms it.)</p>\n<p>But there\u2019s a problem with the data: they record journeys made, not the absence of any journeys (obviously). If we\u2019re to accurately plot weekly spending, we need to include weeks where no journeys were made and no money spent.</p>\n<p>First, let\u2019s make a data frame containing every <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">ISO week</a> from the earliest journey in our data to the most recent.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">blank_weeks</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">seq</span><span class=\"p\">(</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"o\">$</span><span class=\"n\">start</span><span class=\"p\">),</span>\n    <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"o\">$</span><span class=\"n\">end</span><span class=\"p\">),</span>\n    <span class=\"n\">by</span> <span class=\"o\">=</span> <span class=\"s\">'1 week'</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">tibble</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">.,</span>\n        <span class=\"n\">week</span> <span class=\"o\">=</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">.,</span> <span class=\"s\">'%G-W%V'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">blank_weeks</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 2\n##   start               week    \n##   &lt;dttm&gt;              &lt;chr&gt;   \n## 1 2014-09-06 13:14:00 2014-W36\n## 2 2014-09-13 13:14:00 2014-W37\n## 3 2014-09-20 13:14:00 2014-W38\n## 4 2014-09-27 13:14:00 2014-W39\n## 5 2014-10-04 13:14:00 2014-W40\n## 6 2014-10-11 13:14:00 2014-W41</code></pre>\n<p>The format string uses the ISO week year (%G) and the ISO week number (%V), which may differ from what you might intuitively expect. I\u2019ve included a somewhat arbitrary start time, as it\u2019s a bit easier to plot and label datetimes rather than the year-week strings.</p>\n<p>Now we need to summarise our actual journey data, collecting the total fare for each ISO week. We\u2019ll use <code>group_by()</code> and <code>summarise()</code> \u2014 two tools that took me a few tries to get a handle on. Here <code>summarise()</code> works group-wise based on the result of <code>group_by()</code>; you don\u2019t have to pass the group into the <code>summarise()</code> call, just specify the value you want summarised and how.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">real_week_totals</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy_journeys</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">group_by</span><span class=\"p\">(</span><span class=\"n\">week</span> <span class=\"o\">=</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"s\">'%G-W%V'</span><span class=\"p\">))</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">summarise</span><span class=\"p\">(</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">fare</span><span class=\"p\">))</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p>That done, we can use an SQL-like join operation to take every week in our giant list and match it against the week summaries from our real data. The join leaves missing values (<code>NA</code>) in the total column for weeks where no journeys were made (and so weren\u2019t present in the data to summarise) so we replace them with zero.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">complete_week_totals</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">left_join</span><span class=\"p\">(</span><span class=\"n\">blank_weeks</span><span class=\"p\">,</span>\n                                  <span class=\"n\">real_week_totals</span><span class=\"p\">,</span>\n                                  <span class=\"n\">by</span> <span class=\"o\">=</span> <span class=\"s\">'week'</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">replace_na</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"m\">0</span><span class=\"p\">))</span>\n<span class=\"nf\">tail</span><span class=\"p\">(</span><span class=\"n\">complete_week_totals</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<pre><code>## # A tibble: 6 x 3\n##   start               week     total\n##   &lt;dttm&gt;              &lt;chr&gt;    &lt;dbl&gt;\n## 1 2018-03-17 12:14:00 2018-W11   0  \n## 2 2018-03-24 12:14:00 2018-W12   0  \n## 3 2018-03-31 13:14:00 2018-W13  21.1\n## 4 2018-04-07 13:14:00 2018-W14   9.5\n## 5 2018-04-14 13:14:00 2018-W15   0  \n## 6 2018-04-21 13:14:00 2018-W16   7.8</code></pre>\n<p>With this summary frame assembled, we can now plot the totals. I\u2019m also going to mark roughly when I moved house so we can try to see if there\u2019s any particular shift.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">house_move</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">as.POSIXct</span><span class=\"p\">(</span><span class=\"s\">'2016-08-01'</span><span class=\"p\">)</span>\n<span class=\"n\">pound_scale</span> <span class=\"o\">&lt;-</span> <span class=\"n\">scales</span><span class=\"o\">::</span><span class=\"nf\">dollar_format</span><span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s\">'\u00a3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">weeks_for_avg</span> <span class=\"o\">&lt;-</span> <span class=\"m\">8</span>\n\n<span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">complete_week_totals</span><span class=\"p\">,</span>\n       <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">total</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_vline</span><span class=\"p\">(</span>\n        <span class=\"n\">xintercept</span> <span class=\"o\">=</span> <span class=\"n\">house_move</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">rjw_grey</span><span class=\"p\">,</span>\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"m\">0.75</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_point</span><span class=\"p\">(</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">rjw_blue</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">0.75</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_line</span><span class=\"p\">(</span>\n        <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">mav</span><span class=\"p\">(</span><span class=\"n\">complete_week_totals</span><span class=\"o\">$</span><span class=\"n\">total</span><span class=\"p\">,</span>\n                              <span class=\"n\">weeks_for_avg</span><span class=\"p\">)),</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">rjw_red</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"nf\">str_glue</span><span class=\"p\">(</span>\n            <span class=\"s\">'Weekly transport spending and {weeks_for_avg}'</span><span class=\"p\">,</span>\n            <span class=\"s\">'-week moving average'</span><span class=\"p\">),</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s\">'September 2014 to May 2018, vertical bar marks house move'</span><span class=\"p\">),</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">scale_x_datetime</span><span class=\"p\">(</span>\n        <span class=\"n\">date_breaks</span> <span class=\"o\">=</span> <span class=\"s\">'6 months'</span><span class=\"p\">,</span>\n        <span class=\"n\">date_labels</span> <span class=\"o\">=</span> <span class=\"s\">'%b \u2019%y'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pound_scale</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A plot showing my weekly Oyster card spending, September 2014 to May 2018\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-weekly-spending-1.svg\" width=\"720\"/>\n</p>\n<p>It\u2019s clear that there is a difference after the house move. But I\u2019m not sure this plot is the best way to show it. (Nor the best way to show anything.)</p>\n<p>That said, the code for this plot is a pretty great example of what I like about ggplot2: you create a plot, add geoms to it, customise the labels and scales, piece by piece until you\u2019re happy. It\u2019s fairly straightforward to discover things (especially with RStudio\u2019s completion), and you change things by adding on top of the basics instead of hunting around in the properties of figures or axes or whatever.</p>\n<h3>Cumulative spending</h3>\n<p>The first plot showed a change in my average weekly spending. What does that look like when we plot the cumulative spending over this period?</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tidy_journeys</span><span class=\"p\">,</span>\n       <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n                     <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">cumsum</span><span class=\"p\">(</span><span class=\"n\">fare</span><span class=\"p\">),</span>\n                     <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">house_move</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_line</span><span class=\"p\">(</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'Cumulative Oyster card spending'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"s\">'September 2014 to May 2018'</span><span class=\"p\">,</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"s\">'House move'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pound_scale</span><span class=\"p\">,</span>\n        <span class=\"n\">breaks</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">500</span><span class=\"p\">,</span> <span class=\"m\">1000</span><span class=\"p\">,</span> <span class=\"m\">1400</span><span class=\"p\">,</span> <span class=\"m\">1650</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_color_brewer</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Before'</span><span class=\"p\">,</span> <span class=\"s\">'After'</span><span class=\"p\">),</span>\n        <span class=\"n\">palette</span> <span class=\"o\">=</span> <span class=\"s\">'Set2'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">theme</span><span class=\"p\">(</span>\n        <span class=\"n\">legend.position</span> <span class=\"o\">=</span> <span class=\"s\">'bottom'</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A plot showing my cumulative Oyster card spending, September 2014 to May 2018\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-cumulative-spending-1.svg\" width=\"720\"/>\n</p>\n<p>The difference in slope is quite clear; at one point I fitted a linear smoother to the two periods but it overlapped so tightly with the data that it was difficult to read either. I\u2019ve also monkeyed around with the y-axis breaks to highlight the difference; what before took three to six months to spend has taken about 21 months since the house move.</p>\n<h3>Zero-spending weeks</h3>\n<p>One thing that shows up in the first plot, and likely underlies the drop in average spending, is the number of weeks where I don\u2019t travel using my Oyster card at all. Let\u2019s pull together a one-dimensional plot showing just that.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">complete_week_totals</span><span class=\"p\">,</span>\n       <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n           <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">,</span>\n           <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"n\">total</span> <span class=\"o\">==</span> <span class=\"m\">0</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_col</span><span class=\"p\">(</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"m\">60</span> <span class=\"o\">*</span> <span class=\"m\">60</span> <span class=\"o\">*</span> <span class=\"m\">24</span> <span class=\"o\">*</span> <span class=\"m\">7</span><span class=\"p\">)</span> <span class=\"o\">+</span>  <span class=\"c1\"># datetime col width handled as seconds</span>\n    <span class=\"nf\">geom_vline</span><span class=\"p\">(</span>\n        <span class=\"n\">xintercept</span> <span class=\"o\">=</span> <span class=\"n\">house_move</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">rjw_red</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">scale_fill_manual</span><span class=\"p\">(</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">str_c</span><span class=\"p\">(</span><span class=\"n\">rjw_grey</span><span class=\"p\">,</span> <span class=\"s\">'20'</span><span class=\"p\">),</span> <span class=\"n\">rjw_grey</span><span class=\"p\">),</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Some'</span><span class=\"p\">,</span> <span class=\"s\">'None'</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_x_datetime</span><span class=\"p\">(</span>\n        <span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">complete_week_totals</span><span class=\"o\">$</span><span class=\"n\">start</span><span class=\"p\">),</span>\n                   <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">complete_week_totals</span><span class=\"o\">$</span><span class=\"n\">start</span><span class=\"p\">)),</span>\n        <span class=\"n\">expand</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">breaks</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'Weeks with zero Oyster card spending'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"s\">'September 2014 to May 2018, red line marks house move'</span><span class=\"p\">,</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">,</span>\n        <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"s\">'Spending'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">theme</span><span class=\"p\">(</span>\n        <span class=\"n\">legend.position</span> <span class=\"o\">=</span> <span class=\"s\">'bottom'</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A plot showing weeks where I made no journeys using my Oyster card\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-zero-spending-weeks-1.svg\" width=\"720\"/>\n</p>\n<p>The change here after I moved house is stark, nearly an inversion of the previous pattern of zero/no-zero spending weeks. (Almost looks like <a href=\"https://www.robjwells.com/2018/02/british-newspaper-barcodes-explained-and-automated/\">a barcode</a>!)</p>\n<p>My apologies for the thin lines between columns, which is an SVG artefact. The inspiration for this was <a href=\"https://www.macstories.net/stories/exploring-the-app-stores-top-grossing-chart/\">a plot of games/non-games in the App Store top charts</a> that Dr Drang included <a href=\"http://www.leancrew.com/all-this/2016/07/a-delightfully-simple-chart/\">at the bottom of one of his posts</a>.</p>\n<h3>Changes in journey properties</h3>\n<p>So it\u2019s clear that I travel less on the Tube network, and that I spend less. But what has happened to the sort of journeys that I make? Are they longer? Shorter? Less expensive? More?</p>\n<p>Let\u2019s have a look at how the average fare and average journey duration change over time.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">n_journey_avg</span> <span class=\"o\">&lt;-</span> <span class=\"m\">10</span>\n\n<span class=\"n\">common_vline</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">geom_vline</span><span class=\"p\">(</span><span class=\"n\">xintercept</span> <span class=\"o\">=</span> <span class=\"n\">house_move</span><span class=\"p\">,</span>\n                           <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">rjw_red</span><span class=\"p\">)</span>\n<span class=\"n\">common_point</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">geom_point</span><span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">fares_over_time</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"p\">,</span>\n                          <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n                              <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">mav</span><span class=\"p\">(</span><span class=\"n\">fare</span><span class=\"p\">,</span> <span class=\"n\">n_journey_avg</span><span class=\"p\">)))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_x_datetime</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pound_scale</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s\">'Fare'</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'More expensive, shorter journeys'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"nf\">str_glue</span><span class=\"p\">(</span><span class=\"s\">'{n_journey_avg}-journey average, '</span><span class=\"p\">,</span>\n                            <span class=\"s\">'vertical line marks house move'</span><span class=\"p\">))</span>\n\n<span class=\"n\">duration_over_time</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"p\">,</span>\n                             <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n                                 <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">mav</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">n_journey_avg</span><span class=\"p\">)))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">()</span> <span class=\"o\">+</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s\">'Duration (mins)'</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">fares_over_time</span> <span class=\"o\">/</span> <span class=\"n\">duration_over_time</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span>  <span class=\"c1\"># Patchwork is magic</span>\n    <span class=\"n\">common_vline</span> <span class=\"o\">&amp;</span>\n    <span class=\"n\">common_point</span> <span class=\"o\">&amp;</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A plot of average fares and journey durations over time\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-fare-duration-averages-1.svg\" width=\"720\"/>\n</p>\n<p>Journeys taken after the house move appear to be shorter and more expensive. How distinct is this? What is driving the averages? I have a hunch so let me rush on ahead with this plot.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">commute_stations</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Woolwich Arsenal DLR'</span><span class=\"p\">,</span> <span class=\"s\">'Stratford International DLR'</span><span class=\"p\">,</span>\n                      <span class=\"s\">'Stratford'</span><span class=\"p\">,</span> <span class=\"s\">'Pudding Mill Lane DLR'</span><span class=\"p\">)</span>\n\n<span class=\"n\">commute_journeys</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy_journeys</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span>\n        <span class=\"n\">enter</span> <span class=\"o\">%in%</span> <span class=\"n\">commute_stations</span><span class=\"p\">,</span>\n        <span class=\"n\">exit</span> <span class=\"o\">%in%</span> <span class=\"n\">commute_stations</span><span class=\"p\">)</span>\n\n<span class=\"n\">high_speed_journeys</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy_journeys</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">filter</span><span class=\"p\">(</span>\n        <span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">enter</span><span class=\"p\">,</span> <span class=\"s\">'HS1'</span><span class=\"p\">),</span>\n        <span class=\"nf\">str_detect</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"p\">,</span> <span class=\"s\">'HS1'</span><span class=\"p\">))</span>\n\n<span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">tidy_journeys</span><span class=\"p\">,</span>\n       <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">fare</span><span class=\"p\">,</span>\n           <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">duration</span><span class=\"p\">,</span>\n           <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">house_move</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_jitter</span><span class=\"p\">(</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"m\">0.05</span><span class=\"p\">,</span>  <span class=\"c1\"># 5p</span>\n        <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"m\">0.5</span><span class=\"p\">,</span>  <span class=\"c1\"># 30 seconds</span>\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"m\">0.5</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_encircle</span><span class=\"p\">(</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">commute_journeys</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">1.5</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_encircle</span><span class=\"p\">(</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">high_speed_journeys</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">1.5</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">scale_color_brewer</span><span class=\"p\">(</span>\n        <span class=\"n\">palette</span> <span class=\"o\">=</span> <span class=\"s\">'Set2'</span><span class=\"p\">,</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Before'</span><span class=\"p\">,</span> <span class=\"s\">'After'</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_x_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pound_scale</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_y_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">80</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'Pre- and post-move averages driven by two groups'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"nf\">str_c</span><span class=\"p\">(</span><span class=\"s\">'Old commute and high-speed journeys circled,'</span><span class=\"p\">,</span>\n                         <span class=\"s\">' positions not exact'</span><span class=\"p\">),</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">'Fare'</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s\">'Duration (mins)'</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"s\">'House move'</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A plot of journey fare against distance, grouped by whether the journeys were before or after I moved house\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-fare-duration-scatter-1.svg\" width=\"720\"/>\n</p>\n<p>We can see in the lower central section that there\u2019s some overlap. Remember also that there are far fewer post-move journeys, so it\u2019s not surprising that earlier ones dominate this plot. (I added jitter to the points to make things a little easier to see \u2014 <code>geom_jitter()</code> is a wrapper around <code>geom_point()</code>.)</p>\n<p>But what is crucial to understanding the averages are the two rough groups circled: journeys between stations that I used for my old commute (on the left in green), and journeys involving travel on the <a href=\"https://en.wikipedia.org/wiki/High_Speed_1\">High Speed 1</a> (HS1) rail line (on the right in orange).</p>\n<p>My old commute was low-cost, each way either \u00a31.50 or \u00a31 (with an off-peak railcard discount, applied for part of the pre-move period). There are a lot of these journeys (nearly 500). It was a fairly predictable 30ish-minute journey.</p>\n<p>On the other hand, trips involving the HS1 line are expensive and very short. A single off-peak fare is currently \u00a33.90 and peak \u00a35.60, while the journey time between Stratford International and St Pancras is just seven minutes, with a bit of waiting inside the gateline.</p>\n<h3>But is that it?</h3>\n<p>Does that theory of the two extreme groups really explain the difference? Let\u2019s filter out the two groups from our journey data.</p>\n<div class=\"syntax\"><pre><span></span><span class=\"n\">journeys_without_extremes</span> <span class=\"o\">&lt;-</span> <span class=\"n\">tidy_journeys</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">anti_join</span><span class=\"p\">(</span><span class=\"n\">commute_journeys</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n    <span class=\"nf\">anti_join</span><span class=\"p\">(</span><span class=\"n\">high_speed_journeys</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p>Let\u2019s look how the journey durations compare:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">journeys_without_extremes</span><span class=\"p\">,</span>\n       <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">duration</span><span class=\"p\">,</span>\n           <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">house_move</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_histogram</span><span class=\"p\">(</span>\n        <span class=\"n\">binwidth</span> <span class=\"o\">=</span> <span class=\"m\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"s\">'left'</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"s\">'black'</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">0.15</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"s\">'identity'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_x_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">breaks</span> <span class=\"o\">=</span> <span class=\"nf\">seq</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">70</span><span class=\"p\">,</span> <span class=\"m\">10</span><span class=\"p\">),</span>\n        <span class=\"n\">limits</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">70</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_fill_brewer</span><span class=\"p\">(</span>\n        <span class=\"n\">palette</span> <span class=\"o\">=</span> <span class=\"s\">'Set2'</span><span class=\"p\">,</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Before'</span><span class=\"p\">,</span> <span class=\"s\">'After'</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'Post-move journeys still shorter'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"s\">'Commute and HS1 journeys excluded, bars overlap'</span><span class=\"p\">,</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">'Duration (mins)'</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s\">'Number of journeys'</span><span class=\"p\">,</span>\n        <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"s\">'House move'</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A histogram showing journey durations having excluded known extremes, with post-move journeys generally shorter\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-duration-hist-without-extremes-1.svg\" width=\"720\"/>\n</p>\n<p>And the fares:</p>\n<div class=\"syntax\"><pre><span></span><span class=\"nf\">ggplot</span><span class=\"p\">(</span><span class=\"n\">journeys_without_extremes</span><span class=\"p\">,</span>\n       <span class=\"nf\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">fare</span><span class=\"p\">,</span>\n           <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">house_move</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n    <span class=\"nf\">geom_histogram</span><span class=\"p\">(</span>\n        <span class=\"n\">binwidth</span> <span class=\"o\">=</span> <span class=\"m\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"s\">'left'</span><span class=\"p\">,</span>\n        <span class=\"n\">colour</span> <span class=\"o\">=</span> <span class=\"s\">'black'</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"m\">0.15</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"s\">'identity'</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_x_continuous</span><span class=\"p\">(</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pound_scale</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n    <span class=\"nf\">scale_fill_brewer</span><span class=\"p\">(</span>\n        <span class=\"n\">palette</span> <span class=\"o\">=</span> <span class=\"s\">'Set2'</span><span class=\"p\">,</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">'Before'</span><span class=\"p\">,</span> <span class=\"s\">'After'</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n\n    <span class=\"nf\">labs</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">'Post-move journeys generally more expensive'</span><span class=\"p\">,</span>\n        <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"s\">'Commute and HS1 journeys excluded, bars overlap'</span><span class=\"p\">,</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">'Fare'</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s\">'Number of journeys'</span><span class=\"p\">,</span>\n        <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"s\">'House move'</span><span class=\"p\">)</span>\n</pre></div>\n<!-- Comment to separate R code and output -->\n<p class=\"full-width\">\n<img alt=\"A histogram showing journey fares having excluded known extremes, with post-move fares generally more expensive\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-05-03-fare-hist-without-extremes-1.svg\" width=\"720\"/>\n</p>\n<p>While it\u2019s much clearer for duration than cost now, post-move journeys are still generally shorter and more expensive.</p>\n<p>At this point, I\u2019ve reached the limits of how far I\u2019m able to take this with visualisation. One possible route would be to look at the distance between station (in miles), how many stations used are in which fare zone, and the number of fare zones crossed. I don\u2019t have stations/fare zones data readily to hand so we\u2019ll leave that here.</p>\n<p>But I\u2019ll end with an intuitive answer. Durations are shorter because from Woolwich it takes additional time to get into the main Tube network from the DLR, and particularly to central stations. Whereas now I\u2019m not far from a Central Line station, which will get me into zone 1 fairly quickly.</p>\n<p>Fares are higher because I\u2019ve transferred classes of journeys to cycling \u2014 not just my commute to work but shopping and leisure. I\u2019d reckon that the remaining journeys are more likely to involve travel into and within central London, and maybe more likely to be at peak times.</p>\n<h3>Last thoughts</h3>\n<p>If you made it this far, well done, and thanks for reading. There\u2019s a lot of R code in this post, probably too much. But there are two reasons for that: as a reference for myself, and to show that there\u2019s not any magic going on behind the curtain, and very little hard work. (In my code at least, there\u2019s plenty of both in the libraries!)</p>\n<p>Working in R with ggplot2 and the other packages really is a pleasure; it doesn\u2019t take very long to grasp how the different tools fit together into nice, composable pieces, and to assemble them in ways that produce something that matches what you have pictured in your mind.</p>",
      "date_published": "2018-05-03T01:00:00+01:00"
    },
    {
      "id": "https://robjwells.github.io/2018/02/british-newspaper-barcodes-explained-and-automated/",
      "url": "https://robjwells.github.io/2018/02/british-newspaper-barcodes-explained-and-automated/",
      "title": "British newspaper barcodes explained \u2014 and automated",
      "content_html": "<p>Barcodes can be pretty mystifying from the outside, if all you\u2019ve got to go on is a set of lines and numbers, or even magic incantations for the software that produces them.</p>\n<p>Despite working at a place where we produce a product with a new barcode every day, I didn\u2019t understand how they were made up for years.</p>\n<p>But they\u2019re fairly straightforward, and once you know how they work it\u2019s quite simple to produce them reliably. That\u2019s important because getting a barcode wrong can cause real problems.</p>\n<h3>Barcode problems</h3>\n<p>In the case we\u2019ll look at here, daily newspapers, an incorrect barcode means serious headaches for your wholesalers and retailers, and you\u2019ll likely and entirely understandably face a penalty charge for them having to handle your broken product.</p>\n<p>I know because, well, I\u2019ve been there. In our case at the Star there were two main causes of incorrect barcodes, both down to people choosing:</p>\n<ol>\n<li>the wrong issue number or sequence variant;</li>\n<li>the wrong barcode file.</li>\n</ol>\n<p>We\u2019ll talk about the terminology shortly, but we can see how easily problem number one can occur by looking at the interface of standard barcode-producing software:</p>\n<p>\n<img alt=\"A screenshot of the interface of Agamik BarCoder, a good barcode-producing application\" class=\"no-border\" height=\"626\" src=\"https://robjwells.github.io/images/2018-02-28-agamik.png\" width=\"526\"/>\n</p>\n<p>Now, <a href=\"http://www.agamik.co.uk/index.php\">Agamik BarCoder</a> is a nice piece of software and is very versatile. If you need to make a barcode it\u2019s worth a look.</p>\n<p>But look again at that interface \u2014 it\u2019s not intuitive what you need to do to increment from the previous day\u2019s barcode, the settings for which are saved in the application. It\u2019s very easy to put in the wrong details, or accidentally reuse yesterday\u2019s details.</p>\n<p>Second, it produces files with names such as <code>ISSN 03071758_23_09</code> \u2014 a completely logical name, but the similarity between the names and the fact you have to manually place the file on your page makes it easy to choose the wrong barcode, whose name will likely differ only by one digit to the previous day.</p>\n<p>That isn\u2019t helped by Adobe InDesign by default opening the last-used folder when you place an image. At least once, I\u2019ve made the barcode first thing in the morning and accidentally placed the previous day\u2019s barcode file.</p>\n<p>One of the suggestions we had after we printed a paper with the wrong barcode was to have the barcode checked twice before the page is sent to the printers. This is an entirely sensible suggestion, but I know from experience that \u2014 however well-intentioned \u2014 \u201ccheck <code>x</code> twice\u201d is a rule that will be broken when you\u2019re under pressure and short-staffed.</p>\n<p>It\u2019s far more important to have a reliable production process so that whatever makes it through to the proofreading stage is certain to be correct, or as close as possible.</p>\n<p>We can understand this by looking at the <a href=\"https://en.wikipedia.org/wiki/Hierarchy_of_hazard_controls\">hierarchy of hazard controls</a>, which is useful far outside occupational health and safety:</p>\n<p>\n<img alt=\"An illustration of the hierarchy of controls, to reduce industry hazards, which has at the top (most effective) the elimination of hazards, followed by substitution, engineering controls, administrative controls and then finally (and least effective) personal protective equipment.\" class=\"no-border\" height=\"396\" src=\"https://robjwells.github.io/images/2018-02-28-hierarchy-of-controls.png\" width=\"560\"/>\n</p>\n<p>\u201cCheck twice\u201d is clearly an administrative control \u2014 changing the way people work while leaving the hazard in place. An engineering control in our case might be to have software check the barcode when the page is about to be sent to the printers (something we do on PDF export by inspecting the filename). We want to aim still higher up the hierarchy, eliminating or substituting the hazard.</p>\n<p>But to reach that point we need to understand the components of a barcode.</p>\n<h3>Barcode components</h3>\n<p>Barcodes are used all over the place, so it\u2019s understandable that some terms are opaque. But picking a specific case \u2014 daily newspaper barcodes here \u2014 it\u2019s quite easy to break down what they mean and why they\u2019re important.</p>\n<p>The information here comes from <a href=\"http://www.anmw.co.uk/anmw/documents/PPA_Barcode_Guidelines.pdf\">the barcoding guidance published by the Professional Publishers Association and Association of Newspaper and Magazine Wholesalers</a>. It\u2019s a very clear document and if you\u2019re involved in using barcodes for newspapers or magazines you should read it. (Really, do read it, as while I\u2019ll try to bring newspaper barcodes \u201cto life\u201d below, there\u2019s a lot of information in there that I won\u2019t cover \u2014 such as best practice for sizing.)</p>\n<p>Let\u2019s start off by examining a typical newspaper EAN-13+2 barcode, using the terms that you\u2019ll find in the PPA-ANMW guidance:</p>\n<p class=\"full-width\">\n<img alt=\"A diagram showing the components of a British newspaper barcode, using the EAN-13+2 format.\" class=\"no-border\" height=\"418\" src=\"https://robjwells.github.io/images/2018-02-28-issn-basics.png\" width=\"720\"/>\n</p>\n<p>You\u2019ll see at first that it\u2019s clearly made up of two components: the largest is a typical <a href=\"https://en.wikipedia.org/wiki/International_Article_Number\">EAN-13</a> barcode with a smaller <a href=\"https://en.wikipedia.org/wiki/EAN-2\">EAN-2</a> on the right.</p>\n<p>Reading left-to-right, we have the <a href=\"https://www.gs1.org/company-prefix\">GS1 prefix</a> to the barcode number, which is always 977 for the <a href=\"https://en.wikipedia.org/wiki/International_Standard_Serial_Number\">ISSN numbers</a> assigned to newspapers and magazines.</p>\n<p>Next is the first seven digits of the publication\u2019s ISSN number \u2014 the eighth digit isn\u2019t included because it is a <a href=\"https://en.wikipedia.org/wiki/Check_digit\">check digit</a> and is redundant because the EAN-13 includes its own check digit.</p>\n<p>That check digit follows a two-digit sequence variant, which encodes some information about the periodical. On the right, above the EAN-2, is the issue number. This is used in different ways depending on the publication\u2019s frequency.</p>\n<p>Lastly is a chevron, which is used to guard some amount of whitespace on the right-hand side to ensure the barcode reader has enough room to scan properly. (The leading 9 performs the same function on the left.) This is optional.</p>\n<h3>In practice</h3>\n<p>Now let\u2019s look at a real barcode, see which elements we have to think about, and how they fit together.</p>\n<p class=\"full-width\">\n<img alt=\"A diagram showing an annotated barcode as used by the Morning Star newspaper.\" class=\"no-border\" height=\"440\" src=\"https://robjwells.github.io/images/2018-02-28-ms-barcode-annotated.png\" width=\"720\"/>\n</p>\n<p>Now let\u2019s start with the elements that were present on the basic ISSN barcode.</p>\n<h4>ISSN number</h4>\n<p>Your newspaper\u2019s ISSN appears after the 977 prefix. The Morning Star\u2019s ISSN is 0307-1758, but the 8 at the end of that is a check digit, used to detect errors in the preceding seven digits. This is removed because it\u2019s unnecessary as the 13th digit of the EAN-13 is a check digit for all 12 preceding digits. So only the front seven digits of the ISSN appear in the bar code.</p>\n<h4>Sequence variant</h4>\n<p>For daily newspapers the sequence variant provides two pieces of information.</p>\n<p>The first digit is a price code, which indicates to retailers what price they should charge. The code is dependent on the publication \u2014 you can\u2019t tell from the price code alone what price a newspaper will be. For the Star, we currently use price codes 2 (\u00a31) and 4 (\u00a31.50).</p>\n<p>The second digit is the <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">ISO weekday number</a>. Monday is ISO weekday 1, through to Sunday as 7.</p>\n<p>So by looking at the sequence variant in this barcode, we can tell that it\u2019s the paper for Wednesday (ISO weekday 3) and sells at whatever price code 2 corresponds to in the retailer\u2019s point-of-sale system.</p>\n<p>When you introduce a new price, typically you use the next unused price code. We recently increased the price of our Saturday paper from \u00a31.20 (price code 3) to \u00a31.50 (price code 4).</p>\n<h4>Issue number</h4>\n<p>The issue number appears above the EAN-2 supplemental barcode. For daily newspapers this corresponds to the <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">ISO week</a> containing the edition. Note that this may differ from, say, the week number in your diary. New ISO weeks begin on Monday.</p>\n<p>Modern versions of <code>strftime</code> accept the <code>%V</code> format, which will return a zero-padded ISO week number. In Python the <code>date</code> and <code>datetime</code> classes have an <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.isocalendar\"><code>.isocalendar()</code> method</a> which returns a 3-tuple of ISO week-numbering year, ISO week number and ISO weekday number.</p>\n<h4>Header strap</h4>\n<p>The line printed above the barcode is technically not part of the barcode itself, and different publications do different things. It\u2019s common not to print anything, and for years we didn\u2019t either, but I think it\u2019s quite useful to print related information here to help whoever has to check the barcode before the page is sent for printing.</p>\n<p>Note that in this example, all the information printed above the barcode is referred to in the barcode itself (except the year). I use this space to \u201cdecode\u201d the barcode digits for human readers.</p>\n<p>This was suggested to me by our printers (Trinity Mirror), who do something similar with their own titles.</p>\n<h4>Light margin indicator</h4>\n<p>Eagle-eyed readers will spot that the chevron used to guard whitespace for the barcode scanner is missing from the right-hand side. The PPA-ANMW guidance does urge that you include the chevron, but its absence as such won\u2019t cause scanning problems.</p>\n<p>It\u2019s straightforward to guarantee enough space around the barcode by carefully placing it in the first place. Our back-page template reserves a space for the barcode, along with some legally required information, which is big enough to make the chevron unnecessary. You can see this in the image below:</p>\n<p class=\"full-width\">\n<img alt=\"An annotated photo of the barcode on a printed copy of the Morning Star, noting the space reserved around the barcode.\" src=\"https://robjwells.github.io/images/2018-02-28-ms-paper-annotated.jpg\"/>\n</p>\n<p>The main block of text on the left of the barcode doesn\u2019t change. The date below it does, but it\u2019s been tested so that even the longest dates provide enough space. (The longest date in consideration being the edition of Saturday/Sunday December 31-January 1 2022-2023.)</p>\n<p>The superimposed purple lines show where the margins would appear in Adobe InDesign, with the barcode in the bottom-right corner. This section is ruled off above to prevent the encroachment of page elements, with the understanding that page items must end on the baseline grid line above the rule (which itself sits on the grid).</p>\n<p class=\"pull-right\">\n<img alt=\"A photograph of a older style of Morning Star barcode, showing page elements in close proximity.\" src=\"https://robjwells.github.io/images/2018-02-28-morningstar-old-barcode.jpg\"/>\n<img alt=\"A photograph of an even older style of Morning Star barcode, showing page elements in close proximity and a light margin chevron.\" src=\"https://robjwells.github.io/images/2018-02-28-morningstar-older-barcode.jpg\"/>\n</p>\n<p>(As you can see from the smaller photos, this wasn\u2019t always the case. The barcode often had page elements very close by, and did not have its own clear space. At this point, the barcode was also produced at a smaller size to fit within one of the page\u2019s six columns.)</p>\n<p>The \u201cinside margin\u201d on the right-hand side of the page (remember that the back page is in fact the left-hand page of a folded spread) provides an additional light margin. However, note that you still need an adequate distance from the fold itself:</p>\n<blockquote>\n<p>\u201cit is recommended that the symbol should not be printed closer than 10 mm from any cut or folded edge\u201d (PPA-ANMW)</p>\n</blockquote>\n<p>Our inside margin is 9mm, with the edge of the EAN-2 symbol roughly 1.5mm further in, for a total 10.5mm. While it appears that there\u2019s bags of space, we\u2019re still only just within the recommendations.</p>\n<p>You might want to put the barcode on the outer edge of the back (the left-hand side) as the margin there is deeper (15mm in our case), but I would be very cautious about doing so. I\u2019ve seen enough mishandled papers with bits torn off that I prefer the safety of the inside of the sheet.</p>\n<p>You can see similar considerations at work when you look at how other papers place their barcodes. This example of the Sunday Mirror is quite similar to the Morning Star above, but rotated to make use of the more abundant vertical space:</p>\n<p class=\"full-width\">\n<img alt=\"A photograph of a barcode on the back of the Sunday Mirror, rotated so that it is placed sideways on the page.\" src=\"https://robjwells.github.io/images/2018-02-28-sundaymirror-barcode.jpg\"/>\n</p>\n<p>(You can also see the use of a strap above the barcode, with the title name (SM, Sunday Mirror) and date (210517). I\u2019m not sure what LO means, but it could mean London, if this is used as a way of identifying batches from different print sites.)</p>\n<p class=\"pull-right\">\n<img alt=\"A photo of the barcode on The Times newspaper.\" src=\"https://robjwells.github.io/images/2018-02-28-thetimes-barcode.jpg\"/>\n<img alt=\"A photo of the barcode on the Financial Times newspaper.\" src=\"https://robjwells.github.io/images/2018-02-28-financialtimes-barcode.jpg\"/>\n</p>\n<p>The Times and Financial Times also take this approach of cordoning off a space. Neither use a header strap (not unusual), though I am confused by the placement of the chevron in the FT\u2019s barcode. It should be outside of the symbol area to reserve the space, though a lack of space is certainly not an issue.</p>\n<p>Dedicating some space for the barcode is important because it means that there won\u2019t be any compromises made day-to-day. You\u2019ll want to take into account the recommended size and magnification factors in the PPA-ANMW guidance if adjusting page templates.</p>\n<p>One of the changes we made was to abandon the reduced-size barcode (to fit within a page column), which then meant that something else was needed to fill out two columns to justify the space. But \u2014 as seen in the examples from other papers \u2014 it might be that having some amount of additional blank space around the barcode is an easy sell anyway.</p>\n<h3>Automation</h3>\n<p>Where these considerations really come in is when you automate the creation and setting of the barcode, because they can be thought about once, agreed and then left untouched as the system ticks along.</p>\n<p>This gets us to the substitution level of the hierarchy of controls \u2014 we\u2019re looking to do away with the hazard of human error in barcode creation, but ultimately we replace it with another hazard, ensuring that an automated system works correctly. We\u2019ll return to this hazard briefly after taking a look at the automation program itself.</p>\n<p><a href=\"https://github.com/ppps/ms-barcode\">The code is available on GitHub</a>. I won\u2019t be including large chunks of it because it\u2019s all fairly nuts and bolts stuff (and this post is long enough already!).</p>\n<p>The structure is fairly straightforward. Like a lot of my more recent automation projects at work, it has an AppleScript user interface which passes arguments to a Python command-line program, which either performs some action itself or returns a value for use in the AppleScript program.</p>\n<p>In this case, the Python program computes the correct sequence variant (price and weekday) and issue number (ISO week) \u2014 along with a human-readable header \u2014 and embeds them in a <a href=\"https://en.wikipedia.org/wiki/PostScript\">PostScript</a> program that uses the brilliant <a href=\"https://bwipp.terryburton.co.uk\">BWIPP</a> barcode library.</p>\n<p>This PostScript is processed into a PDF file by <a href=\"https://en.wikipedia.org/wiki/Ghostscript\">Ghostscript</a>, and the path to this barcode PDF is handed back to the AppleScript program so that it can embed it in a labelled frame in InDesign. (To embed files in an InDesign document you\u2019ll need the <code>unlink</code> verb. Yes, I thought that meant \u201cdelete the link\u201d at first as well.)</p>\n<p>Here\u2019s a diagram to show the flow through the program (forgive the graphics, I\u2019m learning how to use OmniGraffle):</p>\n<p class=\"full-width\">\n<img alt=\"A diagram showing the flow of action through the ms-barcode application. An AppleScript UI takes input, Python organises the creation of the barcode (using BWIPP and Ghostscript) and then returns the barcode PDF file path to AppleScript, which then embeds it in an Adobe InDesign file.\" class=\"no-border\" src=\"https://robjwells.github.io/images/2018-02-28-ms-barcode-diagram.png\"/>\n</p>\n<p><a href=\"https://github.com/AlDanial/cloc\">Cloc</a> tells me that the main Python file has a <em>whopping</em> 104 lines of code, and there are 264 lines of code in the related unit tests.</p>\n<p>Really all of the heavy lifting is done by BWIPP, a cut-down version of which is included in the <a href=\"https://github.com/ppps/ms-barcode\">ms-barcode</a> repository (just ISSN, EAN-13 and EAN-2). The entirety of my \u201cown\u201d PostScript is this (where the parts in braces are Python string formatting targets):</p>\n<div class=\"syntax\"><pre><span></span><span class=\"lineno\"> 1 </span><span class=\"cp\">%!PS</span>\n<span class=\"lineno\"> 2 </span><span class=\"s\">({bwipp_location})</span> <span class=\"nf\">run</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span><span class=\"mf\">11</span> <span class=\"mf\">5</span> <span class=\"nf\">moveto</span> <span class=\"s\">({issn} {seq:02} {week:02})</span> <span class=\"s\">(includetext height=1.07)</span>\n<span class=\"lineno\"> 5 </span>  <span class=\"nv\">/issn</span> <span class=\"nv\">/uk.co.terryburton.bwipp</span> <span class=\"nf\">findresource</span> <span class=\"nf\">exec</span>\n<span class=\"lineno\"> 6 </span>\n<span class=\"lineno\"> 7 </span><span class=\"c1\">% Print header line(s)</span>\n<span class=\"lineno\"> 8 </span><span class=\"nv\">/Courier</span> <span class=\"nf\">findfont</span>\n<span class=\"lineno\"> 9 </span><span class=\"mf\">9</span> <span class=\"nf\">scalefont</span>\n<span class=\"lineno\">10 </span><span class=\"nf\">setfont</span>\n<span class=\"lineno\">11 </span>\n<span class=\"lineno\">12 </span><span class=\"nf\">newpath</span>\n<span class=\"lineno\">13 </span><span class=\"mf\">11</span> <span class=\"mf\">86</span> <span class=\"nf\">moveto</span>\n<span class=\"lineno\">14 </span><span class=\"s\">({header})</span> <span class=\"nf\">show</span>\n<span class=\"lineno\">15 </span>\n<span class=\"lineno\">16 </span><span class=\"nf\">showpage</span>\n</pre></div>\n<p>The bits that you may need to fiddle with, if you want to produce a different-sized barcode, are the initial location the ISSN symbol is drawn at (line 4) and <code>height=1.07</code> on the same line.</p>\n<p>You\u2019d also want to adjust the size specified to Ghostscript, which is used to trim the resulting image \u2014 the arguments are <code>-dDEVICEWIDTHPOINTS</code>, and <code>-dDEVICEHEIGHTPOINTS</code>.</p>\n<p>I don\u2019t know enough about PostScript (or Ghostscript) to give good general guidance about getting the right size. My advice would be to start with what I have and make small adjustments until you\u2019re heading in the right direction (which is exactly how I settled on the arguments currently in use).</p>\n<p>What I would emphasise is that if you have trouble with the existing Python modules that wrap BWIPP, it\u2019s not difficult to use the PostScript directly yourself. Really, look back at the 16 lines of PostScript above \u2014 that\u2019s it.</p>\n<h3>Wrapping up</h3>\n<p>By automating in this way, we now have a method where the person responsible for the back page simply clicks an icon in their dock, presses return when asked if they want the barcode for tomorrow, and everything else is taken care of.</p>\n<p>Going back to our earlier discussion of hazards, I think we\u2019ve reached the substitution stage rather than the elimination stage.</p>\n<p>We have eliminated human error in choosing the components of the barcode, but we\u2019ve done it by substituting code to make that decision. That\u2019s still a good trade, because that code can be tested to ensure it does the right thing.</p>\n<p>And then, you can go back to not worrying about barcodes.</p>",
      "date_published": "2018-02-28T22:45:00+00:00"
    }
  ]
}